var variable = 'variableValue';
var object = { 'label' : "value", "label2" : 'value2', 'escapeChar' : 'Brandon\'s value'};
var array = [1, 2, "1", "2", true, false, {'label' : 'value'} [1, 2]];

array[0];
	// return first value of the array array

array[array.length] = 'new value';
array.push('another new value');
	// both push new value at the end of the array
array.pop();
	// removes value at end of array and returns that value to console
array.splice(2, 1);
	// remove 1 item with index 2 in the array array WITHOUT preserving length

/*
console ignores
all of this
*/

1 === 1
	// is the object on left identical to the one on the right?
1 !== 1
	// is the object on left NOT identical to the one on the right?
1 == 1
	// is the object on the left equal to the one on the right? String OR integer
1 === '1';
	// false
1 == '1';
	// true
1 != '1';
	// false

var counter = 0;
counter = counter + 1;
counter;
	// add 1 to counter
var counter = 0;
counter += 1;
counter;
	// add 1 to counter
var counter = 0;
counter++;
counter;
	// add 1 to counter

constructor functions must start with a capital letter
use constructor functions to create objects
each constructor defines a class of objects
class refers to the set of objects initialized by the constructor
ex:
  function Constructor(x,y) {
    this.attrib1 = x;
    this.attrib2 = y;
  }
  var thing = new Constructor(1,2);
  //thing evaluates now to: {attrib1:1, attrib2:2}

constructor function prototypes can be used to give more attributes or methods to constructed objects.
ex:
  Constructor.prototype.translate = function(x,y) {
    this.attrib1 = this.attrib1 + x;
    this.attrib2 = this.attrib2 + y;
}
  thing.translate(1,2) //thing now evaluates to {attrib1:2, attrib2:4}
  //actually, a better way to do this would be:
  Constructor.prototype.translate = function(x,y) {
    var translated = {
      attrib1: this.attrib1 + x,
      attrib2: this.attrib2 + y,
    };
    return translated;
  }
  // that way, each constructed object doesn'
